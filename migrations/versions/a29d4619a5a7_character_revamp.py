"""character revamp

Revision ID: a29d4619a5a7
Revises: e9fb38919550
Create Date: 2025-01-22 00:45:22.342474

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from api.model.enums import CreatureTypes, EquipSlots


# revision identifiers, used by Alembic.
revision: str = 'a29d4619a5a7'
down_revision: Union[str, None] = 'e9fb38919550'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


equip_slots_enum = sa.Enum(EquipSlots, name='equipslots')
creature_types_enum = sa.Enum(CreatureTypes, name='creaturetypes')

def upgrade() -> None:
    
    equip_slots_enum.create(op.get_bind(), checkfirst=True)
    creature_types_enum.create(op.get_bind(), checkfirst=True)
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ability',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('min', sa.Integer(), nullable=False),
        sa.Column('max', sa.Integer(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('abbreviation', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('condition',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('source', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('damage_type',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('icon', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('equipment_type',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('icon', sa.String(), nullable=True),
        sa.Column('isWeapon', sa.Boolean(), nullable=False),
        sa.Column('isArmor', sa.Boolean(), nullable=False),
        sa.Column('isShield', sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('item',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('type', sa.Enum('Consumable', 'Weapon', 'Armor', 'Clothing', 'Shield', 'Jewelry', 'Tool', 'Resource', 'Misc', 'KeyItem', name='itembasetype'), nullable=False),
        sa.Column('isConsumable', sa.Boolean(), nullable=False),
        sa.Column('rarity', sa.Enum('Common', 'Uncommon', 'Rare', 'VeryRare', 'Legendary', 'Artifact', 'Relic', 'Unique', 'Alchemical', name='itemrarity'), nullable=False),
        sa.Column('weight', sa.Enum('NA', 'Light', 'Medium', 'Heavy', 'ExtremelyHeavy', name='itemweight'), nullable=False),
        sa.Column('property', sa.Enum('BaseItem', 'UniqueItem', name='itemproperty'), nullable=False),
        sa.Column('stackable', sa.Enum('Stackable', 'NotStackable', name='itemstackable'), nullable=False),
        sa.Column('condition', sa.Enum('NA', 'Perfect', 'Good', 'Fair', 'Poor', 'Broken', name='itemcondition'), nullable=False),
        sa.Column('material', sa.Enum('NA', 'Wood', 'Stone', 'Metal', 'Leather', 'Cloth', 'Crystal', 'Organic', 'Parchment', 'Magical', name='itemmaterial'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('language',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('race_feat',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('raceId', sa.Integer(), nullable=False),
        sa.Column('featId', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['featId'], ['feat.id'], ),
        sa.ForeignKeyConstraint(['raceId'], ['race.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('race_language',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('raceId', sa.Integer(), nullable=False),
        sa.Column('languageId', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['languageId'], ['language.id'], ),
        sa.ForeignKeyConstraint(['raceId'], ['race.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spell',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('abilityId', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('castingTime', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('duration', sa.String(), nullable=True),
        sa.Column('school', sa.String(), nullable=True),
        sa.Column('range', sa.String(), nullable=True),
        sa.Column('level', sa.Integer(), nullable=True),
        sa.Column('melee', sa.Boolean(), nullable=False),
        sa.Column('verbal', sa.Boolean(), nullable=False),
        sa.Column('somatic', sa.Boolean(), nullable=False),
        sa.Column('material', sa.Boolean(), nullable=False),
        sa.Column('ritual', sa.Boolean(), nullable=False),
        sa.Column('concentration', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['abilityId'], ['ability.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('statsheet_ability',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('statshetId', sa.Integer(), nullable=False),
        sa.Column('abilityId', sa.Integer(), nullable=False),
        sa.Column('adjustment', sa.Integer(), nullable=True),
        sa.Column('value', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['abilityId'], ['ability.id'], ),
        sa.ForeignKeyConstraint(['statshetId'], ['statsheet.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('statsheet_damage_type',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('statshetId', sa.Integer(), nullable=False),
        sa.Column('damageTypeId', sa.Integer(), nullable=False),
        sa.Column('vulnerable', sa.Boolean(), nullable=True),
        sa.Column('resistant', sa.Boolean(), nullable=True),
        sa.Column('immune', sa.Boolean(), nullable=True),
        sa.Column('source', sa.String(), nullable=True),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['damageTypeId'], ['damage_type.id'], ),
        sa.ForeignKeyConstraint(['statshetId'], ['statsheet.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('statsheet_savingthrow',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('statshetId', sa.Integer(), nullable=False),
        sa.Column('abilityId', sa.Integer(), nullable=False),
        sa.Column('advantage', sa.Boolean(), nullable=True),
        sa.Column('source', sa.String(), nullable=True),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['abilityId'], ['ability.id'], ),
        sa.ForeignKeyConstraint(['statshetId'], ['statsheet.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_class',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('characterId', sa.Integer(), nullable=False),
        sa.Column('classId', sa.Integer(), nullable=False),
        sa.Column('subclassId', sa.Integer(), nullable=False),
        sa.Column('usedHitDice', sa.Integer(), nullable=True),
        sa.Column('level', sa.Integer(), nullable=True),
        sa.Column('xp', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['characterId'], ['character.id'], ),
        sa.ForeignKeyConstraint(['classId'], ['class.id'], ),
        sa.ForeignKeyConstraint(['subclassId'], ['class.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_condition',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('characterId', sa.Integer(), nullable=False),
        sa.Column('conditionId', sa.Integer(), nullable=False),
        sa.Column('source', sa.String(), nullable=True),
        sa.Column('duration', sa.String(), nullable=True),
        sa.Column('stacks', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['characterId'], ['character.id'], ),
        sa.ForeignKeyConstraint(['conditionId'], ['condition.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_feat',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('characterId', sa.Integer(), nullable=True),
        sa.Column('featId', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['characterId'], ['character.id'], ),
        sa.ForeignKeyConstraint(['featId'], ['feat.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_language',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('characterId', sa.Integer(), nullable=False),
        sa.Column('languageId', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['characterId'], ['character.id'], ),
        sa.ForeignKeyConstraint(['languageId'], ['language.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_relationship',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('characterId', sa.Integer(), nullable=False),
        sa.Column('otherCharacterId', sa.Integer(), nullable=False),
        sa.Column('allies', sa.Boolean(), nullable=False),
        sa.Column('enemies', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['characterId'], ['character.id'], ),
        sa.ForeignKeyConstraint(['otherCharacterId'], ['character.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('condition_effect',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('conditionId', sa.Integer(), nullable=False),
        sa.Column('vulnerableId', sa.Integer(), nullable=True),
        sa.Column('resistantId', sa.Integer(), nullable=True),
        sa.Column('immuneId', sa.Integer(), nullable=True),
        sa.Column('abilityId', sa.Integer(), nullable=True),
        sa.Column('abilityAdj', sa.Integer(), nullable=True),
        sa.Column('skillId', sa.Integer(), nullable=True),
        sa.Column('skillAdj', sa.Integer(), nullable=True),
        sa.Column('rollAdvantage', sa.Boolean(), nullable=True),
        sa.Column('rollDisadvantage', sa.Boolean(), nullable=True),
        sa.Column('rollType', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['abilityId'], ['ability.id'], ),
        sa.ForeignKeyConstraint(['conditionId'], ['condition.id'], ),
        sa.ForeignKeyConstraint(['immuneId'], ['damage_type.id'], ),
        sa.ForeignKeyConstraint(['resistantId'], ['damage_type.id'], ),
        sa.ForeignKeyConstraint(['skillId'], ['skill.id'], ),
        sa.ForeignKeyConstraint(['vulnerableId'], ['damage_type.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spellbook_spell',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('spellbookId', sa.Integer(), nullable=False),
        sa.Column('spellId', sa.Integer(), nullable=False),
        sa.Column('spellLevel', sa.Integer(), nullable=True),
        sa.Column('isCantrip', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['spellId'], ['spell.id'], ),
        sa.ForeignKeyConstraint(['spellbookId'], ['spellbook.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('statsheet_proficiency',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('statshetId', sa.Integer(), nullable=False),
        sa.Column('skillId', sa.Integer(), nullable=True),
        sa.Column('adjustment', sa.Integer(), nullable=True),
        sa.Column('custom', sa.String(), nullable=True),
        sa.Column('source', sa.String(), nullable=True),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['skillId'], ['skill.id'], ),
        sa.ForeignKeyConstraint(['statshetId'], ['statsheet.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inventory_shared',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('inventoryId', sa.Integer(), nullable=False),
        sa.Column('sharedUserId', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['inventoryId'], ['inventory.id'], ),
        sa.ForeignKeyConstraint(['sharedUserId'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.execute('DROP TABLE proficiency CASCADE')
    op.execute('DROP TABLE statsheet_savingthrows CASCADE')
    op.execute('DROP TABLE race_feats CASCADE')
    op.execute('DROP TABLE cantripknowledge CASCADE')
    op.execute('DROP TABLE class_feats CASCADE')
    op.execute('DROP TABLE items CASCADE')
    op.execute('DROP TABLE shared_inventory CASCADE')
    op.execute('DROP TABLE spells CASCADE')
    op.execute('DROP TABLE character_description CASCADE')
    op.execute('DROP TABLE subclass_feats CASCADE')
    op.execute('DROP TABLE hitdice CASCADE')
    op.execute('DROP TABLE subclass CASCADE')
    op.execute('DROP TABLE statsheet_proficiencies CASCADE')
    op.drop_table('spellbookprepared')
    op.drop_table('savingthrow')
    op.drop_table('spellbookknowledge')
    op.drop_table('statsheet_skills')
    op.drop_table('spellcomponents')
    op.add_column('character', sa.Column('userId', sa.Integer(), nullable=True))
    op.add_column('character', sa.Column('isNpc', sa.Boolean(), nullable=False))
    op.add_column('character', sa.Column('age', sa.Integer(), nullable=True))
    op.add_column('character', sa.Column('height', sa.String(), nullable=True))
    op.add_column('character', sa.Column('weight', sa.String(), nullable=True))
    op.add_column('character', sa.Column('eye_color', sa.String(), nullable=True))
    op.add_column('character', sa.Column('skin_color', sa.String(), nullable=True))
    op.add_column('character', sa.Column('hair_color', sa.String(), nullable=True))
    op.add_column('character', sa.Column('alignment', sa.String(), nullable=True))
    op.add_column('character', sa.Column('religion', sa.String(), nullable=True))
    op.add_column('character', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('appearance', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('bonds', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('ideals', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('personality', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('flaws', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('backstory', sa.Text(), nullable=True))
    op.add_column('character', sa.Column('created', sa.DateTime(), nullable=True))
    op.add_column('character', sa.Column('updated', sa.DateTime(), nullable=True))
    op.alter_column('character', 'raceId',
            existing_type=sa.INTEGER(),
            nullable=False)
    op.drop_constraint('character_name_key', 'character', type_='unique')
    op.drop_constraint('character_classId_fkey', 'character', type_='foreignkey')
    op.create_foreign_key(None, 'character', 'user', ['userId'], ['id'])
    op.drop_column('character', 'classId')
    op.drop_column('character', 'subclassId')
    op.drop_column('character', 'languages')
    op.drop_column('character', 'type')
    op.drop_column('character', 'speed')
    op.drop_column('character', 'campaignCompatability')
    op.drop_column('character', 'name')
    op.add_column('class', sa.Column('primaryAbilityId', sa.Integer(), nullable=False))
    op.add_column('class', sa.Column('hitDice', sa.String(), nullable=True))
    op.add_column('class', sa.Column('isPrimary', sa.Boolean(), nullable=True))
    op.add_column('class', sa.Column('primaryClassId', sa.Integer(), nullable=True))
    op.alter_column('class', 'description',
            existing_type=sa.VARCHAR(),
            type_=sa.Text(),
            existing_nullable=True)
    op.create_foreign_key(None, 'class', 'ability', ['primaryAbilityId'], ['id'])
    op.create_foreign_key(None, 'class', 'class', ['primaryClassId'], ['id'])
    op.drop_column('class', 'spellCastingAbility')
    op.alter_column('class_resource', 'description',
            existing_type=sa.VARCHAR(),
            type_=sa.Text(),
            existing_nullable=True)
    op.drop_constraint('class_resource_classTableId_fkey', 'class_resource', type_='foreignkey')
    op.drop_column('class_resource', 'max')
    op.drop_column('class_resource', 'current')
    op.drop_column('class_resource', 'classTableId')
    op.add_column('class_table', sa.Column('resourceId', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('equipTypeId', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('featId', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('resourceQuantity', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('level', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('spellSlotQuantity', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('spellSlotLevel', sa.Integer(), nullable=True))
    op.add_column('class_table', sa.Column('requirements', sa.Text(), nullable=True))
    op.alter_column('class_table', 'classId',
            existing_type=sa.INTEGER(),
            nullable=False)
    op.create_foreign_key(None, 'class_table', 'feat', ['featId'], ['id'])
    op.create_foreign_key(None, 'class_table', 'equipment_type', ['equipTypeId'], ['id'])
    op.create_foreign_key(None, 'class_table', 'class_resource', ['resourceId'], ['id'])
    op.drop_column('class_table', 'level6SpellSlots')
    op.drop_column('class_table', 'level7SpellSlots')
    op.drop_column('class_table', 'level3SpellSlots')
    op.drop_column('class_table', 'profBonus')
    op.drop_column('class_table', 'level2SpellSlots')
    op.drop_column('class_table', 'level8SpellSlots')
    op.drop_column('class_table', 'level4SpellSlots')
    op.drop_column('class_table', 'spellsKnown')
    op.drop_column('class_table', 'level9SpellSlots')
    op.drop_column('class_table', 'hitDice')
    op.drop_column('class_table', 'level1SpellSlots')
    op.drop_column('class_table', 'level5SpellSlots')
    op.drop_column('class_table', 'cantripsKnown')
    op.add_column('feat', sa.Column('requirements', sa.Text(), nullable=True))
    op.drop_constraint('feat_name_key', 'feat', type_='unique')
    op.drop_column('feat', 'prerequisite')
    op.add_column('inventory', sa.Column('equipped', sa.Boolean(), nullable=True))
    op.add_column('inventory', sa.Column('equipSlot', equip_slots_enum, nullable=True))
    op.add_column('inventory', sa.Column('attuned', sa.Boolean(), nullable=True))
    op.add_column('inventory', sa.Column('updated', sa.DateTime(), nullable=True))
    op.alter_column('inventory', 'characterId',
            existing_type=sa.INTEGER(),
            nullable=False)
    op.alter_column('inventory', 'itemId',
            existing_type=sa.INTEGER(),
            nullable=False)
    op.drop_constraint('inventory_characterId_key', 'inventory', type_='unique')
    op.create_foreign_key(None, 'inventory', 'item', ['itemId'], ['id'])
    op.add_column('race', sa.Column('type', creature_types_enum, nullable=True))
    op.add_column('race', sa.Column('walkSpeed', sa.Integer(), nullable=False))
    op.add_column('race', sa.Column('swimSpeed', sa.Integer(), nullable=True))
    op.add_column('race', sa.Column('flySpeed', sa.Integer(), nullable=True))
    op.add_column('race', sa.Column('climbSpeed', sa.Integer(), nullable=True))
    op.add_column('race', sa.Column('burrowSpeed', sa.Integer(), nullable=True))
    op.alter_column('race', 'size',
            existing_type=sa.VARCHAR(),
            nullable=False)
    op.drop_column('race', 'alignment')
    op.drop_column('race', 'languages')
    op.add_column('skill', sa.Column('abilityId', sa.Integer(), nullable=False))
    op.create_foreign_key(None, 'skill', 'ability', ['abilityId'], ['id'])
    op.add_column('spellbook', sa.Column('statsheetId', sa.Integer(), nullable=False))
    op.add_column('spellbook', sa.Column('spellCastingAbilityId', sa.Integer(), nullable=False))
    op.add_column('spellbook', sa.Column('cantrips', sa.Integer(), nullable=True))
    op.add_column('spellbook', sa.Column('spellsKnown', sa.Integer(), nullable=True))
    op.add_column('spellbook', sa.Column('spellsPrepared', sa.Integer(), nullable=True))
    op.add_column('spellbook', sa.Column('actions', sa.Integer(), nullable=True))
    op.add_column('spellbook', sa.Column('bonusActions', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'spellbook', 'statsheet', ['statsheetId'], ['id'])
    op.create_foreign_key(None, 'spellbook', 'ability', ['spellCastingAbilityId'], ['id'])
    op.drop_column('spellbook', 'warlockslots')
    op.drop_column('spellbook', 'warlockslotlevel')
    op.add_column('statsheet', sa.Column('maxHealth', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('tempHealth', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('armorClass', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('initative', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('exhaustion', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('observation', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('walkSpeed', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('swimSpeed', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('flySpeed', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('burrowSpeed', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('climbSpeed', sa.Integer(), nullable=True))
    op.add_column('statsheet', sa.Column('updated', sa.DateTime(), nullable=True))
    op.drop_constraint('statsheet_spellbookId_key', 'statsheet', type_='unique')
    op.drop_constraint('statsheet_spellbookId_fkey', 'statsheet', type_='foreignkey')
    op.drop_column('statsheet', 'inspiration')
    op.drop_column('statsheet', 'strength')
    op.drop_column('statsheet', 'charisma')
    op.drop_column('statsheet', 'wisdom')
    op.drop_column('statsheet', 'dexterity')
    op.drop_column('statsheet', 'type')
    op.drop_column('statsheet', 'spellbookId')
    op.drop_column('statsheet', 'level')
    op.drop_column('statsheet', 'exp')
    op.drop_column('statsheet', 'constitution')
    op.drop_column('statsheet', 'intelligence')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('statsheet', sa.Column('intelligence', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('constitution', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('exp', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('spellbookId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('dexterity', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('wisdom', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('charisma', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('strength', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('statsheet', sa.Column('inspiration', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('statsheet_spellbookId_fkey', 'statsheet', 'spellbook', ['spellbookId'], ['id'])
    op.create_unique_constraint('statsheet_spellbookId_key', 'statsheet', ['spellbookId'])
    op.drop_column('statsheet', 'updated')
    op.drop_column('statsheet', 'climbSpeed')
    op.drop_column('statsheet', 'burrowSpeed')
    op.drop_column('statsheet', 'flySpeed')
    op.drop_column('statsheet', 'swimSpeed')
    op.drop_column('statsheet', 'walkSpeed')
    op.drop_column('statsheet', 'observation')
    op.drop_column('statsheet', 'exhaustion')
    op.drop_column('statsheet', 'initative')
    op.drop_column('statsheet', 'armorClass')
    op.drop_column('statsheet', 'tempHealth')
    op.drop_column('statsheet', 'maxHealth')
    op.add_column('spellbook', sa.Column('warlockslotlevel', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('spellbook', sa.Column('warlockslots', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'spellbook', type_='foreignkey')
    op.drop_constraint(None, 'spellbook', type_='foreignkey')
    op.drop_column('spellbook', 'bonusActions')
    op.drop_column('spellbook', 'actions')
    op.drop_column('spellbook', 'spellsPrepared')
    op.drop_column('spellbook', 'spellsKnown')
    op.drop_column('spellbook', 'cantrips')
    op.drop_column('spellbook', 'spellCastingAbilityId')
    op.drop_column('spellbook', 'statsheetId')
    op.drop_constraint(None, 'skill', type_='foreignkey')
    op.drop_column('skill', 'abilityId')
    op.add_column('race', sa.Column('languages', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('race', sa.Column('alignment', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('race', 'size',
            existing_type=sa.VARCHAR(),
            nullable=True)
    op.drop_column('race', 'burrowSpeed')
    op.drop_column('race', 'climbSpeed')
    op.drop_column('race', 'flySpeed')
    op.drop_column('race', 'swimSpeed')
    op.drop_column('race', 'walkSpeed')
    op.drop_column('race', 'type')
    op.alter_column('note_shared_users', 'id',
            existing_type=sa.INTEGER(),
            server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
            existing_nullable=False,
            autoincrement=True)
    op.drop_constraint(None, 'inventory', type_='foreignkey')
    op.create_unique_constraint('inventory_characterId_key', 'inventory', ['characterId'])
    op.alter_column('inventory', 'itemId',
            existing_type=sa.INTEGER(),
            nullable=True)
    op.alter_column('inventory', 'characterId',
            existing_type=sa.INTEGER(),
            nullable=True)
    op.drop_column('inventory', 'updated')
    op.drop_column('inventory', 'attuned')
    op.drop_column('inventory', 'equipSlot')
    op.drop_column('inventory', 'equipped')
    op.add_column('feat', sa.Column('prerequisite', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_unique_constraint('feat_name_key', 'feat', ['name'])
    op.drop_column('feat', 'requirements')
    op.add_column('class_table', sa.Column('cantripsKnown', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level5SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level1SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('hitDice', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level9SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('spellsKnown', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level4SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level8SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level2SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('profBonus', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level3SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level7SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('class_table', sa.Column('level6SpellSlots', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'class_table', type_='foreignkey')
    op.drop_constraint(None, 'class_table', type_='foreignkey')
    op.drop_constraint(None, 'class_table', type_='foreignkey')
    op.alter_column('class_table', 'classId',
            existing_type=sa.INTEGER(),
            nullable=True)
    op.drop_column('class_table', 'requirements')
    op.drop_column('class_table', 'spellSlotLevel')
    op.drop_column('class_table', 'spellSlotQuantity')
    op.drop_column('class_table', 'level')
    op.drop_column('class_table', 'resourceQuantity')
    op.drop_column('class_table', 'featId')
    op.drop_column('class_table', 'equipTypeId')
    op.drop_column('class_table', 'resourceId')
    op.add_column('class_resource', sa.Column('classTableId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('class_resource', sa.Column('current', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('class_resource', sa.Column('max', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('class_resource_classTableId_fkey', 'class_resource', 'class_table', ['classTableId'], ['id'])
    op.alter_column('class_resource', 'description',
            existing_type=sa.Text(),
            type_=sa.VARCHAR(),
            existing_nullable=True)
    op.add_column('class', sa.Column('spellCastingAbility', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'class', type_='foreignkey')
    op.drop_constraint(None, 'class', type_='foreignkey')
    op.alter_column('class', 'description',
            existing_type=sa.Text(),
            type_=sa.VARCHAR(),
            existing_nullable=True)
    op.drop_column('class', 'primaryClassId')
    op.drop_column('class', 'isPrimary')
    op.drop_column('class', 'hitDice')
    op.drop_column('class', 'primaryAbilityId')
    op.add_column('character', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('character', sa.Column('campaignCompatability', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('character', sa.Column('speed', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('character', sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('character', sa.Column('languages', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('character', sa.Column('subclassId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('character', sa.Column('classId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'character', type_='foreignkey')
    op.create_foreign_key('character_classId_fkey', 'character', 'class', ['classId'], ['id'])
    op.create_foreign_key('character_subclassId_fkey', 'character', 'subclass', ['subclassId'], ['id'])
    op.create_unique_constraint('character_name_key', 'character', ['name'])
    op.alter_column('character', 'raceId',
            existing_type=sa.INTEGER(),
            nullable=True)
    op.drop_column('character', 'updated')
    op.drop_column('character', 'created')
    op.drop_column('character', 'backstory')
    op.drop_column('character', 'flaws')
    op.drop_column('character', 'personality')
    op.drop_column('character', 'ideals')
    op.drop_column('character', 'bonds')
    op.drop_column('character', 'appearance')
    op.drop_column('character', 'description')
    op.drop_column('character', 'religion')
    op.drop_column('character', 'alignment')
    op.drop_column('character', 'hair_color')
    op.drop_column('character', 'skin_color')
    op.drop_column('character', 'eye_color')
    op.drop_column('character', 'weight')
    op.drop_column('character', 'height')
    op.drop_column('character', 'age')
    op.drop_column('character', 'isNpc')
    op.drop_column('character', 'userId')
    op.create_table('spellcomponents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('spellId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('itemId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('goldValue', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['spellId'], ['spells.id'], name='spellcomponents_spellId_fkey'),
    sa.PrimaryKeyConstraint('id', name='spellcomponents_pkey')
    )
    op.create_table('subclass',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subclass_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='subclass_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('statsheet_skills',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statsheetId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('skillId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['skillId'], ['skill.id'], name='statsheet_skills_skillId_fkey'),
    sa.ForeignKeyConstraint(['statsheetId'], ['statsheet.id'], name='statsheet_skills_statsheetId_fkey'),
    sa.PrimaryKeyConstraint('id', name='statsheet_skills_pkey')
    )
    op.create_table('class_subclasses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('classId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subclassId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['classId'], ['class.id'], name='class_subclasses_classId_fkey'),
    sa.ForeignKeyConstraint(['subclassId'], ['subclass.id'], name='class_subclasses_subclassId_fkey'),
    sa.PrimaryKeyConstraint('id', name='class_subclasses_pkey')
    )
    op.create_table('spellbookknowledge',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('spellbookId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('spellId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['spellId'], ['spells.id'], name='spellbookknowledge_spellId_fkey'),
    sa.ForeignKeyConstraint(['spellbookId'], ['spellbook.id'], name='spellbookknowledge_spellbookId_fkey'),
    sa.PrimaryKeyConstraint('id', name='spellbookknowledge_pkey')
    )
    op.create_table('savingthrow',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('savingthrow_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('statName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='savingthrow_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('spellbookprepared',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('spellbookId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('spellId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['spellId'], ['spells.id'], name='spellbookprepared_spellId_fkey'),
    sa.ForeignKeyConstraint(['spellbookId'], ['spellbook.id'], name='spellbookprepared_spellbookId_fkey'),
    sa.PrimaryKeyConstraint('id', name='spellbookprepared_pkey')
    )
    op.create_table('statsheet_proficiencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statsheetId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('proficiencyId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['proficiencyId'], ['proficiency.id'], name='statsheet_proficiencies_proficiencyId_fkey'),
    sa.ForeignKeyConstraint(['statsheetId'], ['statsheet.id'], name='statsheet_proficiencies_statsheetId_fkey'),
    sa.PrimaryKeyConstraint('id', name='statsheet_proficiencies_pkey')
    )
    op.create_table('hitdice',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statsheetId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('d4', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('d6', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('d8', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('d10', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('d12', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['statsheetId'], ['statsheet.id'], name='hitdice_statsheetId_fkey'),
    sa.PrimaryKeyConstraint('id', name='hitdice_pkey')
    )
    op.create_table('subclass_feats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subclassId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('featId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['featId'], ['feat.id'], name='subclass_feats_featId_fkey'),
    sa.ForeignKeyConstraint(['subclassId'], ['subclass.id'], name='subclass_feats_subclassId_fkey'),
    sa.PrimaryKeyConstraint('id', name='subclass_feats_pkey')
    )
    op.create_table('character_description',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('characterId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('age', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('height', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('eyes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('skin', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hair', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('background', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('appearance', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bonds', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ideals', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('personality', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('flaws', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('religion', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('backstory', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['characterId'], ['character.id'], name='character_description_characterId_fkey'),
    sa.PrimaryKeyConstraint('id', name='character_description_pkey'),
    sa.UniqueConstraint('characterId', name='character_description_characterId_key')
    )
    op.create_table('spells',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('castingTime', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('school', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('range', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('verbal', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('somatic', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('material', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ritual', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('concentration', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='spells_pkey')
    )
    op.create_table('shared_inventory',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('inventoryId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['inventoryId'], ['inventory.id'], name='shared_inventory_inventoryId_fkey'),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], name='shared_inventory_userId_fkey'),
    sa.PrimaryKeyConstraint('id', name='shared_inventory_pkey')
    )
    op.create_table('items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='items_pkey')
    )
    op.create_table('class_feats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('classId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('featId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['classId'], ['class.id'], name='class_feats_classId_fkey'),
    sa.ForeignKeyConstraint(['featId'], ['feat.id'], name='class_feats_featId_fkey'),
    sa.PrimaryKeyConstraint('id', name='class_feats_pkey')
    )
    op.create_table('cantripknowledge',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('spellbookId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('spellId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['spellbookId'], ['spellbook.id'], name='cantripknowledge_spellbookId_fkey'),
    sa.PrimaryKeyConstraint('id', name='cantripknowledge_pkey')
    )
    op.create_table('race_feats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('raceId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('featId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['featId'], ['feat.id'], name='race_feats_featId_fkey'),
    sa.ForeignKeyConstraint(['raceId'], ['race.id'], name='race_feats_raceId_fkey'),
    sa.PrimaryKeyConstraint('id', name='race_feats_pkey')
    )
    op.create_table('proficiency',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='proficiency_pkey'),
    sa.UniqueConstraint('name', name='proficiency_name_key')
    )
    op.create_table('statsheet_savingthrows',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statsheetId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('savingThrowId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['savingThrowId'], ['savingthrow.id'], name='statsheet_savingthrows_savingThrowId_fkey'),
    sa.ForeignKeyConstraint(['statsheetId'], ['statsheet.id'], name='statsheet_savingthrows_statsheetId_fkey'),
    sa.PrimaryKeyConstraint('id', name='statsheet_savingthrows_pkey')
    )
    op.drop_table('inventory_shared')
    op.drop_table('statsheet_proficiency')
    op.drop_table('spellbook_spell')
    op.drop_table('condition_effect')
    op.drop_table('character_relationship')
    op.drop_table('character_language')
    op.drop_table('character_feat')
    op.drop_table('character_condition')
    op.drop_table('character_class')
    op.drop_table('statsheet_savingthrow')
    op.drop_table('statsheet_damage_type')
    op.drop_table('statsheet_ability')
    op.drop_table('spell')
    op.drop_table('race_language')
    op.drop_table('race_feat')
    op.drop_table('language')
    op.drop_table('item')
    op.drop_table('equipment_type')
    op.drop_table('damage_type')
    op.drop_table('condition')
    op.drop_table('ability')
    # ### end Alembic commands ###
